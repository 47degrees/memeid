rules = [
  Disable
  DisableSyntax
  LeakingImplicitClassVal
  MissingFinal
  NoValInForComprehension
  OrganizeImports
]

OrganizeImports {
  expandRelative = true
  removeUnused = false
  groups = [
    "re:java?\\.",
    "scala.",
    "cats.",
    "sbt.",
    "*",
    "com.sun."
  ]
}

Disable.symbols = [
  {
    regex = {
      includes = [
        "^\\Qscala/util/Either.RightProjection#get().\\E$",
        "^\\Qscala/util/Either.LeftProjection#get().\\E$"
      ]
    }
    id = "Either.get"
    message = """
      Do not use Either.get(). It can throw an exception in case of wrong side.
      To disable this error you can use:
        - @SuppressWarnings(Array("scalafix:Disable.Either.get"))
        - // scalafix:ok Disable.Either.get
    """
  }
  {
    regex = {
      includes = [
        "^\\Qscala/Option#get().\\E$",
        "^\\Qscala/Some#get().\\E$",
        "^\\Qscala/None.get().\\E$"
      ]
    }
    id = "Option.get"
    message = """
      Do not use Option.get(). It can throw an exception in case of None.
      To disable this error you can use:
        - @SuppressWarnings(Array("scalafix:Disable.Option.get"))
        - // scalafix:ok Disable.Option.get
    """
  }
  {
    regex = {
      includes = [
        "^\\Qscala/util/Try#get().\\E$",
        "^\\Qscala/util/Success#get().\\E$",
        "^\\Qscala/util/Failure#get().\\E$"
      ]
    }
    id = "Try.get"
    message = """
      Do not use Try.get(). It can throw an exception in case of failure.
      To disable this error you can use:
        - @SuppressWarnings(Array("scalafix:Disable.Try.get"))
        - // scalafix:ok Disable.Try.get
    """
  }
  {
    regex = "^\\Qscala/collection/parallel\\E.*$"
    id = "scala.collection.parallel"
    message = """
      Parallel collections do not perform very well and block the thread, prefer cats' Parallel (https://typelevel.org/cats/typeclasses/parallel.html).
      To disable this error you can use:
        - @SuppressWarnings(Array("scalafix:Disable.scala.collection.parallel"))
        - // scalafix:ok Disable.scala.collection.parallel
    """
  }
  {
    regex = "^.*\\Q#equals().\\E$"
    id = "equals"
    message = """
      Prefer using cats' Eq typeclass (https://typelevel.org/cats/typeclasses/eq.html).
      To disable this error you can use:
        - @SuppressWarnings(Array("scalafix:Disable.equals"))
        - // scalafix:ok Disable.equals
    """
  }
  {
    regex = "^.*\\Q#hashCode().\\E$"
    id = "hashCode"
    message = """
      Prefer using cats' Hash typeclass (https://github.com/typelevel/cats/blob/master/kernel/src/main/scala/cats/kernel/Hash.scala).
      To disable this error you can use:
        - @SuppressWarnings(Array("scalafix:Disable.hashCode"))
        - // scalafix:ok Disable.hashCode
    """
  }
  {
    regex = "^.*\\Q#toString().\\E$"
    id = "toString"
    message = """
      Prefer using cats' Show typeclass (https://typelevel.org/cats/typeclasses/show.html).
      To disable this error you can use:
        - @SuppressWarnings(Array("scalafix:Disable.toString"))
        - // scalafix:ok Disable.toString
    """
  }
  {
    symbol = "scala/Enumeration"
    id = "Enumeration"
    message = """
      Prefer a sealed abstract class or Enumeratum (https://github.com/lloydmeta/enumeratum).
      To disable this error you can use:
        - @SuppressWarnings(Array("scalafix:Disable.Enumeration"))
        - // scalafix:ok Disable.Enumeration
    """
  }
  {
    regex = {
      includes = [
        "^\\Qscala/collection/IterableLike#head().\\E$",
        "^\\Qscala/collection/GenTraversableLike#head().\\E$",
        "^\\Qscala/collection/LinearSeqOptimized#head().\\E$",
        "^\\Qscala/collection/IndexedSeqOptimized#head().\\E$",
        "^\\Qscala/collection/TraversableLike#head().\\E$"
      ]
    }
    id = "head"
    message = """
      Try not to use `head`, it is not a total function.
      To disable this error you can use:
        - @SuppressWarnings(Array("scalafix:Disable.head"))
        - // scalafix:ok Disable.head
    """
  }
  {
    regex = {
      includes = [
        "^\\Qscala/collection/IterableLike#last().\\E$",
        "^\\Qscala/collection/GenTraversableLike#last().\\E$",
        "^\\Qscala/collection/LinearSeqOptimized#last().\\E$",
        "^\\Qscala/collection/IndexedSeqOptimized#last().\\E$",
        "^\\Qscala/collection/TraversableLike#last().\\E$"
      ]
    }
    id = "last"
    message = """
      Try not to use `last`, it is not a total function.
      To disable this error you can use:
        - @SuppressWarnings(Array("scalafix:Disable.last"))
        - // scalafix:ok Disable.last
    """
  }
  {
    symbol = "scala/Predef/println"
    id = "println"
    message = """
      Try not to use `println`, use a logger instead.
      To disable this error you can use:
        - @SuppressWarnings(Array("scalafix:Disable.println"))
        - // scalafix:ok Disable.println
    """
  }
]

Disable.ifSynthetic = [
  "scala/Option.option2Iterable"
  "scala/Predef.any2stringadd"
  {
    regex = {
      includes = [
        "^\\Qscala/collection/MapLike#apply().\\E$"
        "^\\Qscala/collection/LinearSeqOptimized#apply().\\E$"
      ]
    }
    id = "collection.apply"
    message = """
      Try not to use apply method from collections, it is not a total function.
      To disable this error you can use:
        - @SuppressWarnings(Array("scalafix:Disable.collection.apply"))
        - // scalafix:ok Disable.collection.apply
    """
  }
]

DisableSyntax {
  noAsInstanceOf = true
  noContravariantTypes = true
  noCovariantTypes = true
  noDefaultArgs = true
  noFinalVal = true
  noFinalize = true
  noImplicitConversion = true
  noImplicitObject = true
  noIsInstanceOf = true
  noNulls = true
  noReturns = true
  noSemicolons = true
  noTabs = true
  noThrows = true
  noUniversalEquality = true
  noValInAbstract = true
  noValPatterns = true
  noVars = true
  noWhileLoops = true
  noXml = true
}
